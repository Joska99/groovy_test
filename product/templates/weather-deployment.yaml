apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.deployment.name }}
  namespace: {{ .Values.deployment.namespace }}
# Define ReplicaSet
spec:
  replicas: {{ .Values.deployment.replicas }}
  # Deployment strategy "rolling update"
  strategy:
    type: {{ .Values.deployment.strategy_type }}
    rollingUpdate:
      maxSurge: {{ .Values.deployment.max_surge }}
      maxUnavailable: {{ .Values.deployment.max_unavailable }}
  # Match Pods with this label
  selector:
    matchLabels:
      app: {{ .Values.deployment.match_labels }}
  # Define Pod template for ReplicaSet
  template:
    metadata:
      # Label to match to ReplicaSet
      labels:
        app: {{ .Values.deployment.pod_label }}
    # Define Container in Pod
    spec:
      containers:
        - name: {{ .Chart.Name }}
          image: {{ .Values.deployment.container_image }}
          ports:
            - containerPort: {{ .Values.deployment.container_port }}

          # TODO add PVC
          # JSON file to write from SC
          # volumeMounts:
          #   - name: persistent-storage
          #     mountPath: /weather-app/efs/history.json
          #     subPath: history.json
          # [ ] #############################

          # ENV FROM CM
          envFrom:
            - configMapRef:
                name: {{ .Values.deployment.cm_name }}
          # Define resources limits for container
          resources:
            # Scrap metrics
            requests:
              cpu: {{ .Values.deployment.request_cpu }}
            limits:
              memory: {{ .Values.deployment.limit_memory }}
              cpu: {{ .Values.deployment.limit_cpu }}
      # To pull Always
      imagePullPolicy: {{ .Values.deployment.pull_policy }}

# TODO create Volume for pvc
      # volumes:
      #   - name: persistent-storage
      #     persistentVolumeClaim:
      #       claimName: efs-claim-1
# [ ] #############################

# TODO create Private ECR
      # Secret to pull from ECR
      # imagePullSecrets:
        # - name: {{ .Values.deployment.deployment_secret }}
# [ ] #############################

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Values.pvc.name }}
spec:
  accessModes:
    - {{ .Values.pvc.access_mode }}
  storageClassName: {{ .Values.pvc.sc_name }}
  resources:
    requests:
      storage: {{ .Values.pvc.storage }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.service.name }}
  namespace: {{ .Values.service.namespace }}
spec:
  type: {{ .Values.service.type }}
  selector:
    app: {{ .Values.service.selector }}
  ports:
    - port: {{ .Values.service.port }}
      targetPort: {{ .Values.service.targetPort }}
      nodePort: {{ .Values.service.nodePort }}



# TODO: try SS
# apiVersion: apps/v1
# kind: StatefulSet
# metadata:
#   name: web
# spec:
#   serviceName: "nginx"
#   replicas: 2
#   selector:
#     matchLabels:
#       app: nginx
#   template:
#     metadata:
#       labels:
#         app: nginx
#     spec:
#       containers:
#       - name: nginx
#         image: registry.k8s.io/nginx-slim:0.8
#         ports:
#         - containerPort: 80
#           name: web
#         volumeMounts:
#         - name: www
#           mountPath: /us
#   volumeClaimTemplates:
#   - metadata:
#       name: www
#     spec:
#       accessModes: [ "ReadWriteOnce" ]
#       resources:
#         requests:
#           storage: 1Gi